f = open("./uvm_virtual_sequences_codes/test.sv", "w")

f.write('// Base Test Class\n')
f.write('class base_test extends uvm_test;\n')
f.write(' `uvm_component_utils(base_test);\n')
f.write('\n')
f.write(' // Environment Class Instantiation\n')
f.write(' top_env Env;\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "base_test", uvm_component parent = null);\n')
f.write('   super.new(name, parent);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Build Phase\n')
f.write(' function void build_phase (uvm_phase phase);\n')
f.write('   Env = top_env::type_id::create("Env");\n')
f.write(' endfunction: build_phase\n')
f.write('\n')
f.write(' // Method to Connect Sequencer Handles in VSEQ\n')
f.write(' function void init_vseq (base_vseq vseq);\n')
f.write('   vseq.SQR_AHB = test.env.ahb_agent.SQR_AHB;\n')
f.write('   vseq.SQR_AXI = test.env.axi_agent.SQR_AXI;\n')
f.write(' endfunction: init_vseq\n')
f.write('\n')
f.write('endclass: base_test\n')
f.write('\n')
f.write('// In the test base class i.e. base_test, shown UVM code above, a method i.e. init_vseq() is created which is used to assign the sequencer handles to the handles in classes derived from the virtual sequence base class.\n')
f.write('// Main Test\n')
f.write('class test extends base_test;\n')
f.write(' `uvm_component_utils(test)\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "test", uvm_component parent = null);\n')
f.write(' super.new(name, parent);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Run Phase\n')
f.write(' task run_phase (uvm_phase phase);\n')
f.write('   // Create the Virtual Sequence\n')
f.write('   my_vseq vseq = my_vseq::type_id::create("vseq");\n')
f.write('   phase.raise_objection(this);\n')
f.write('   // Virtual Sequence Initialization\n')
f.write('   init_vseq(vseq);\n')
f.write('   // Start the Virtual Sequence\n')
f.write('   vseq.start(null);\n')
f.write('   phase.drop_objection(this);\n')
f.write('  endtask: run_phase\n')
f.write(' \n')
f.write('endclass: test\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_virtual_sequences_codes/test.sv", "r")
print(f.read())
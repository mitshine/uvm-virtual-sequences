f = open("./uvm_virtual_sequences_codes/my_vseq.sv", "w")

f.write('// Base Virtual Sequence Class\n')
f.write('class base_vseq extends uvm_sequence #(uvm_sequence_item);\n')
f.write(' `uvm_object_utils(base_vseq)\n')
f.write('\n')
f.write('// Target Agent Sequencers\n')
f.write('uvm_sequencer #(ahb_txn) SQR_AHB;\n')
f.write(' uvm_sequencer #(axi_txn) SQR_AXI;\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "base_vseq");\n')
f.write('   super.new(name);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write('endclass: vseq_base\n')
f.write('\n')
f.write('// Virtual Sequence Class\n')
f.write('class my_vseq extends base_vseq;\n')
f.write(' `uvm_object_utils(my_vseq)\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "my_vseq");\n')
f.write('   super.new(name);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Sequence Body Task\n')
f.write(' task body();\n')
f.write('\n')
f.write('   ahb_seqeunce ahb_seq;\n')
f.write('   axi_sequence axi_seq;\n')
f.write('\n')
f.write('   ahb_seq = ahb_sequence::type_id::create("ahb_seq");\n')
f.write('   axi_seq = axi_sequence::type_id::create("axi_seq");\n')
f.write('\n')
f.write('   fork\n')
f.write('    abh_seq.start(SQR_AHB);\n')
f.write('    axi_seq.start(SQR_AXI);\n')
f.write('   join\n')
f.write('\n')
f.write('endclass: my_vseq\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_virtual_sequences_codes/my_vseq.sv", "r")
print(f.read())